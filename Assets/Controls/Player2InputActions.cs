//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Controls/Player2InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Player2InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Player2InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player2InputActions"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""3ac3e93b-aa1f-4a0d-bb61-21ad72d0d6c3"",
            ""actions"": [
                {
                    ""name"": ""Player2Move"",
                    ""type"": ""Value"",
                    ""id"": ""969d9365-6b8e-4309-a5cb-71feb2630eb6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""NormalizeVector2"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Player2Interact"",
                    ""type"": ""Button"",
                    ""id"": ""f3a5b610-d92f-4c4c-a9f1-0c84bd0f6d1c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=0.25),Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Arrow"",
                    ""id"": ""036946f6-1c34-4fa4-af5e-3df3d269c612"",
                    ""path"": ""Dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player2Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""cb97830f-9084-44e7-85c8-55371407a90d"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player2Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""da2a3e47-4729-4354-b4be-aa93cc04a7fd"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player2Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e67e2fdd-2c3b-4c97-a67d-b3192b821763"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player2Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""7253783f-d329-41fa-ada5-c99379453e50"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player2Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""29788d14-017c-453f-96e0-c15273d44fac"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone(min=0.5)"",
                    ""groups"": """",
                    ""action"": ""Player2Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8e3c48ac-9e13-45fb-b6c3-5b3efc286818"",
                    ""path"": ""<Keyboard>/slash"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player2Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9c6d440a-3184-43e4-aae9-7976682dcd03"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player2Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MainMenu"",
            ""id"": ""82ec114d-6f39-41f6-9b61-1a4753280141"",
            ""actions"": [
                {
                    ""name"": ""StartGame"",
                    ""type"": ""Button"",
                    ""id"": ""1e172f33-e4cc-435c-b37d-30c1cd6c2643"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""EndGame"",
                    ""type"": ""Button"",
                    ""id"": ""55e5ee67-40d5-4068-8434-1f78e4219986"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b9a337c0-3757-4606-ac8d-56676921fb4d"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b6655f4d-9260-43a8-acb5-ff5c69e4c688"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EndGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Cutscene"",
            ""id"": ""7e747232-6a3b-4b12-97da-7af160ab1931"",
            ""actions"": [
                {
                    ""name"": ""Player2SkipCutscene"",
                    ""type"": ""Button"",
                    ""id"": ""46beb5be-b09a-4c1c-ba08-84b5369ab24f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2a7c85c6-82c9-4dff-83df-de18b711a7b1"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player2SkipCutscene"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_Player2Move = m_Gameplay.FindAction("Player2Move", throwIfNotFound: true);
        m_Gameplay_Player2Interact = m_Gameplay.FindAction("Player2Interact", throwIfNotFound: true);
        // MainMenu
        m_MainMenu = asset.FindActionMap("MainMenu", throwIfNotFound: true);
        m_MainMenu_StartGame = m_MainMenu.FindAction("StartGame", throwIfNotFound: true);
        m_MainMenu_EndGame = m_MainMenu.FindAction("EndGame", throwIfNotFound: true);
        // Cutscene
        m_Cutscene = asset.FindActionMap("Cutscene", throwIfNotFound: true);
        m_Cutscene_Player2SkipCutscene = m_Cutscene.FindAction("Player2SkipCutscene", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_Gameplay_Player2Move;
    private readonly InputAction m_Gameplay_Player2Interact;
    public struct GameplayActions
    {
        private @Player2InputActions m_Wrapper;
        public GameplayActions(@Player2InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Player2Move => m_Wrapper.m_Gameplay_Player2Move;
        public InputAction @Player2Interact => m_Wrapper.m_Gameplay_Player2Interact;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @Player2Move.started += instance.OnPlayer2Move;
            @Player2Move.performed += instance.OnPlayer2Move;
            @Player2Move.canceled += instance.OnPlayer2Move;
            @Player2Interact.started += instance.OnPlayer2Interact;
            @Player2Interact.performed += instance.OnPlayer2Interact;
            @Player2Interact.canceled += instance.OnPlayer2Interact;
        }

        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @Player2Move.started -= instance.OnPlayer2Move;
            @Player2Move.performed -= instance.OnPlayer2Move;
            @Player2Move.canceled -= instance.OnPlayer2Move;
            @Player2Interact.started -= instance.OnPlayer2Interact;
            @Player2Interact.performed -= instance.OnPlayer2Interact;
            @Player2Interact.canceled -= instance.OnPlayer2Interact;
        }

        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);

    // MainMenu
    private readonly InputActionMap m_MainMenu;
    private List<IMainMenuActions> m_MainMenuActionsCallbackInterfaces = new List<IMainMenuActions>();
    private readonly InputAction m_MainMenu_StartGame;
    private readonly InputAction m_MainMenu_EndGame;
    public struct MainMenuActions
    {
        private @Player2InputActions m_Wrapper;
        public MainMenuActions(@Player2InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @StartGame => m_Wrapper.m_MainMenu_StartGame;
        public InputAction @EndGame => m_Wrapper.m_MainMenu_EndGame;
        public InputActionMap Get() { return m_Wrapper.m_MainMenu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainMenuActions set) { return set.Get(); }
        public void AddCallbacks(IMainMenuActions instance)
        {
            if (instance == null || m_Wrapper.m_MainMenuActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MainMenuActionsCallbackInterfaces.Add(instance);
            @StartGame.started += instance.OnStartGame;
            @StartGame.performed += instance.OnStartGame;
            @StartGame.canceled += instance.OnStartGame;
            @EndGame.started += instance.OnEndGame;
            @EndGame.performed += instance.OnEndGame;
            @EndGame.canceled += instance.OnEndGame;
        }

        private void UnregisterCallbacks(IMainMenuActions instance)
        {
            @StartGame.started -= instance.OnStartGame;
            @StartGame.performed -= instance.OnStartGame;
            @StartGame.canceled -= instance.OnStartGame;
            @EndGame.started -= instance.OnEndGame;
            @EndGame.performed -= instance.OnEndGame;
            @EndGame.canceled -= instance.OnEndGame;
        }

        public void RemoveCallbacks(IMainMenuActions instance)
        {
            if (m_Wrapper.m_MainMenuActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMainMenuActions instance)
        {
            foreach (var item in m_Wrapper.m_MainMenuActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MainMenuActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MainMenuActions @MainMenu => new MainMenuActions(this);

    // Cutscene
    private readonly InputActionMap m_Cutscene;
    private List<ICutsceneActions> m_CutsceneActionsCallbackInterfaces = new List<ICutsceneActions>();
    private readonly InputAction m_Cutscene_Player2SkipCutscene;
    public struct CutsceneActions
    {
        private @Player2InputActions m_Wrapper;
        public CutsceneActions(@Player2InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Player2SkipCutscene => m_Wrapper.m_Cutscene_Player2SkipCutscene;
        public InputActionMap Get() { return m_Wrapper.m_Cutscene; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CutsceneActions set) { return set.Get(); }
        public void AddCallbacks(ICutsceneActions instance)
        {
            if (instance == null || m_Wrapper.m_CutsceneActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CutsceneActionsCallbackInterfaces.Add(instance);
            @Player2SkipCutscene.started += instance.OnPlayer2SkipCutscene;
            @Player2SkipCutscene.performed += instance.OnPlayer2SkipCutscene;
            @Player2SkipCutscene.canceled += instance.OnPlayer2SkipCutscene;
        }

        private void UnregisterCallbacks(ICutsceneActions instance)
        {
            @Player2SkipCutscene.started -= instance.OnPlayer2SkipCutscene;
            @Player2SkipCutscene.performed -= instance.OnPlayer2SkipCutscene;
            @Player2SkipCutscene.canceled -= instance.OnPlayer2SkipCutscene;
        }

        public void RemoveCallbacks(ICutsceneActions instance)
        {
            if (m_Wrapper.m_CutsceneActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICutsceneActions instance)
        {
            foreach (var item in m_Wrapper.m_CutsceneActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CutsceneActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CutsceneActions @Cutscene => new CutsceneActions(this);
    public interface IGameplayActions
    {
        void OnPlayer2Move(InputAction.CallbackContext context);
        void OnPlayer2Interact(InputAction.CallbackContext context);
    }
    public interface IMainMenuActions
    {
        void OnStartGame(InputAction.CallbackContext context);
        void OnEndGame(InputAction.CallbackContext context);
    }
    public interface ICutsceneActions
    {
        void OnPlayer2SkipCutscene(InputAction.CallbackContext context);
    }
}
